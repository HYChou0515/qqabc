[project]
name = "qqabc"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "Chou Hung-Yi", email = "hychou.svm@gmail.com" }
]
requires-python = ">=3.9"
dependencies = []

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
cli = [
    "typer>=0.15.2",
]
dev = [
    "coverage[toml]>=7.6.12",
    "faker>=36.1.1",
    "freezegun>=1.5.1",
    "mypy>=1.15.0",
    "pytest>=8.3.4",
    "pytest-freezegun>=0.4.2",
    "pytest-mock>=3.14.0",
    "ruff>=0.9.7",
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version="3.9"

[[tool.mypy.overrides]]
module = [
    "torchvision.*",
]
ignore_missing_imports = true

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py39"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # we are testing the code, so we need to use `assert` in tests
    "S101", # Use of assert detected.
    # allow import inside function
    "PLC0415", # `import` should be at the top-level of a file
    # we use pickle and dill to serialize objects in tests
    "S301", # `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    "S403", # `pickle`, `cPickle`, `dill`, and `shelve` modules are possibly insecure
    # magic value comparison is allowed in tests
    "PLR2004", # Magic value used in comparison, consider replacing `11` with a constant variable
]

[tool.ruff.lint]
preview = true
ignore = [
    "RET504", # Unnecessary assignment to `out` before `return` statement
    "COM812", # conflict with formatter.
    "ISC001", # conflict with formatter.
    "SIM108", # Use ternary operator instead of `if`-`else`-block
    "SIM103", # SIM103 Return the condition directly
    # We allow typing.Any
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in
    "S101", # Use of assert detected.
    "TRY003", # Avoid specifying long messages outside the exception class
    "COM819",
    "FURB101", # `open` and `read` should be replaced by `Path(fname).read_bytes()`
    "FURB103", # `open` and `write` should be replaced by `Path(self.meta_path).write_text(tmp.read())`
    "EM101", # Exception must not use a string literal, assign to variable first
    "EM102", # Exception must not use an f-string literal, assign to variable first
    # using keys() let us know that we are working with a dictionary
    "SIM118", # Use `key in dict` instead of `key in dict.keys()`
    "PLR6301", # Method could be a function, class method, or static method
    "ARG002", # Unused method argument
    "B903", # Class could be dataclass or namedtuple
    "B024", # is an abstract base class, but it has no abstract methods or properties
]
select = [
    # pycodestyle
    # "D",  # no need to check docstrings
    "E",  # errors
    "W",  #  warnings
    # flake8
    "F",
    # mccabe
    "C90",
    # isort
    "I",
    # pep8-naming
    "N",
    # pyupgrade
    "UP",
    # flake8-2020
    "YTT",
    # flake8-annotations
    "ANN0",
    "ANN2",
    "ANN4",
    # flake8-async
    "ASYNC",
    # flake8-trio
    "ASYNC1",
    # flake8-bandit
    "S",
    # flake8-blind-except
    "BLE",
    # flake8-boolean-trap
    "FBT",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-commas
    "COM",
    # flake8-copyright
    # "CPY",  # no need to check
    # flake8-comprehensions
    "C4",
    # flake8-datetimez
    "DTZ",
    # flake8-debugger
    "T10",
    # flake8-django
    # "DJ",  # no use django
    # flake8-errmsg
    "EM",
    # flake8-executable
    "EXE",
    # flake8-future-annotations
    "FA",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-import-conventions
    "ICN",
    # flake8-logging
    "LOG",
    # flake8-logging-format
    "G",
    # flake8-no-pep420
    "INP",
    # flake8-pie
    "PIE",
    # flake8-print
    "T20",
    # flake8-pyi
    "PYI",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-raise
    "RSE",
    # flake8-return
    "RET",
    # flake8-self
    "SLF",
    # flake8-slots
    "SLOT",
    # flake8-simplify
    "SIM",
    # flake8-tidy-imports
    "TID",
    # flake8-type-checking
    "TCH",
    # flake8-gettext
    "INT",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    # "PTH",  pathlib is slow, see https://github.com/HYChou0515/py-artest/issues/51
    # flake8-todos
    "TD",
    # flake8-fixme
    "FIX",
    # eradicate
    "ERA",
    # pandas-vet
    "PD",
    # pygrep-hooks
    "PGH",
    # Pylint
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    # tryceratops
    "TRY",
    # flynt
    "FLY",
    # NumPy-specific rules
    "NPY",
    # Airflow
    # "AIR", # no use airflow
    # Perflint
    "PERF",
    # refurb
    "FURB",
    # Ruff-specific rules
    "RUF",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
