from abc import ABC, abstractmethod
from collections.abc import Generator
from typing import TypedDict

from qqabc.application.domain.model.job import (
    SerializedJob as SerializedJob,
)
from qqabc.application.domain.model.job import (
    SerializedJobStatus as SerializedJobStatus,
)
from qqabc.common.serializer import serializer as serializer

class JobRepoAdapterDumps(TypedDict):
    queue: list[dict]
    history: list[dict]
    status_history: dict[str, list[dict]]

class JobRepoAdapter(ABC):
    @abstractmethod
    def job_exists(self, job_id: str) -> bool: ...
    @abstractmethod
    def add_job(self, s_job: SerializedJob) -> None: ...
    @abstractmethod
    def get_job(self, job_id: str) -> SerializedJob | None: ...
    @abstractmethod
    def list_jobs(self) -> list[SerializedJob]: ...
    @abstractmethod
    def add_status(self, s_status: SerializedJobStatus) -> None: ...
    @abstractmethod
    def get_latest_status(self, job_id: str) -> SerializedJobStatus | None: ...
    @abstractmethod
    def iter_status(self, job_id: str) -> Generator[SerializedJobStatus]: ...
    @abstractmethod
    def pop_largest_priority_job(
        self, job_type: str | None
    ) -> SerializedJob | None: ...
    def dump(self) -> bytes: ...
    @abstractmethod
    def dump_dict(self) -> JobRepoAdapterDumps: ...
    def load(self, raw: bytes) -> None: ...
    @abstractmethod
    def load_dict(self, obj: JobRepoAdapterDumps) -> None: ...

class InMemoryJobRepo(JobRepoAdapter):
    def job_exists(self, job_id: str) -> bool: ...
    def add_job(self, s_job: SerializedJob) -> None: ...
    def get_job(self, job_id: str) -> SerializedJob | None: ...
    def list_jobs(self) -> list[SerializedJob]: ...
    def add_status(self, s_status: SerializedJobStatus) -> None: ...
    def get_latest_status(self, job_id: str) -> SerializedJobStatus | None: ...
    def iter_status(self, job_id: str) -> Generator[SerializedJobStatus]: ...
    def pop_largest_priority_job(
        self, job_type: str | None
    ) -> SerializedJob | None: ...
    def dump_dict(self) -> JobRepoAdapterDumps: ...
    def load_dict(self, dumps: JobRepoAdapterDumps) -> None: ...
    def teardown(self) -> None: ...

class FileJobRepo(JobRepoAdapter):
    def __init__(self, db_root: str) -> None: ...
    def job_exists(self, job_id: str) -> bool: ...
    def add_job(self, s_job: SerializedJob) -> None: ...
    def get_job(self, job_id: str) -> SerializedJob | None: ...
    def list_jobs(self) -> list[SerializedJob]: ...
    def add_status(self, s_status: SerializedJobStatus) -> None: ...
    def get_latest_status(self, job_id: str) -> SerializedJobStatus | None: ...
    def iter_status(self, job_id: str) -> Generator[SerializedJobStatus]: ...
    def pop_largest_priority_job(
        self, job_type: str | None
    ) -> SerializedJob | None: ...
    def dump_dict(self) -> JobRepoAdapterDumps: ...
    def load_dict(self, dumps: JobRepoAdapterDumps) -> None: ...
    def teardown(self) -> None: ...
